{
	"info": {
		"_postman_id": "a1b2c3d4-e5f6-7890-abcd-ef1234567890",
		"name": "Simple Car Recognition API",
		"description": "Simplified Car License Plate Recognition API with only 2 endpoints:\n\n1. **POST /api/cars** - Upload car images and get recognition results\n2. **GET /api/cars** - Get all cars with complete details\n\nThis API uses AI-powered license plate recognition to detect and extract car information from uploaded images.",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "12345678"
	},
	"item": [
		{
			"name": "Upload Car Images",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"pm.test(\"Response has success field\", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData).to.have.property('success');",
							"});",
							"",
							"pm.test(\"Response contains cars array\", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData).to.have.property('cars');",
							"    pm.expect(jsonData.cars).to.be.an('array');",
							"});",
							"",
							"pm.test(\"Each car has required fields\", function () {",
							"    var jsonData = pm.response.json();",
							"    if (jsonData.cars.length > 0) {",
							"        var car = jsonData.cars[0];",
							"        pm.expect(car).to.have.property('plateNumber');",
							"        pm.expect(car).to.have.property('color');",
							"        pm.expect(car).to.have.property('type');",
							"        pm.expect(car).to.have.property('imageUrl');",
							"        pm.expect(car).to.have.property('confidence');",
							"    }",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "images",
							"type": "file",
							"src": [],
							"description": "Upload one or multiple car images (JPG, PNG, WebP). Max 10 images."
						}
					]
				},
				"url": {
					"raw": "{{baseUrl}}/api/cars",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"api",
						"cars"
					]
				},
				"description": "Upload car images and get AI-powered license plate recognition results.\n\n**Features:**\n- Upload 1-10 images simultaneously\n- AI-powered license plate detection\n- Complete car information extraction (plate, color, type)\n- Automatic image processing and cleanup\n- Saves results to database\n\n**Response includes:**\n- Detected cars with complete details\n- Processing statistics\n- Success/error information for each image\n\n**Supported formats:** JPG, PNG, WebP (max 10MB each)"
			},
			"response": [
				{
					"name": "Successful Recognition",
					"originalRequest": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "images",
									"type": "file",
									"src": "car-image.jpg"
								}
							]
						},
						"url": {
							"raw": "{{baseUrl}}/api/cars",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"cars"
							]
						}
					},
					"status": "OK",
					"code": 200,
					"_postman_previewlanguage": "json",
					"header": [
						{
							"key": "Content-Type",
							"value": "application/json"
						}
					],
					"cookie": [],
					"body": "{\n    \"success\": true,\n    \"message\": \"Processed 1 image(s), detected 1 car(s)\",\n    \"totalImages\": 1,\n    \"totalCarsDetected\": 1,\n    \"cars\": [\n        {\n            \"id\": 123,\n            \"plateNumber\": \"22-24869\",\n            \"color\": \"White\",\n            \"type\": \"Sedan\",\n            \"imageUrl\": \"/uploads/car-image-123.jpg\",\n            \"confidence\": 95,\n            \"cameraInfo\": \"Image: car-image.jpg\",\n            \"timestamp\": \"2025-09-25T10:59:00.000Z\"\n        }\n    ],\n    \"processingDetails\": [\n        {\n            \"filename\": \"car-image.jpg\",\n            \"success\": true,\n            \"carsDetected\": 1,\n            \"error\": null\n        }\n    ],\n    \"timestamp\": \"2025-09-25T10:59:00.123Z\"\n}"
				},
				{
					"name": "No Images Provided",
					"originalRequest": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "formdata",
							"formdata": []
						},
						"url": {
							"raw": "{{baseUrl}}/api/cars",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"cars"
							]
						}
					},
					"status": "Bad Request",
					"code": 400,
					"_postman_previewlanguage": "json",
					"header": [
						{
							"key": "Content-Type",
							"value": "application/json"
						}
					],
					"cookie": [],
					"body": "{\n    \"success\": false,\n    \"message\": \"No images provided. Please upload at least one image.\"\n}"
				}
			]
		},
		{
			"name": "Get All Cars",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"pm.test(\"Response has success field\", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData).to.have.property('success');",
							"    pm.expect(jsonData.success).to.be.true;",
							"});",
							"",
							"pm.test(\"Response contains cars array\", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData).to.have.property('cars');",
							"    pm.expect(jsonData.cars).to.be.an('array');",
							"});",
							"",
							"pm.test(\"Response contains statistics\", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData).to.have.property('totalCars');",
							"    pm.expect(jsonData).to.have.property('totalInDatabase');",
							"    pm.expect(jsonData).to.have.property('last24Hours');",
							"    pm.expect(jsonData).to.have.property('pagination');",
							"});",
							"",
							"pm.test(\"Pagination info is present\", function () {",
							"    var jsonData = pm.response.json();",
							"    var pagination = jsonData.pagination;",
							"    pm.expect(pagination).to.have.property('limit');",
							"    pm.expect(pagination).to.have.property('offset');",
							"    pm.expect(pagination).to.have.property('totalPages');",
							"    pm.expect(pagination).to.have.property('currentPage');",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{baseUrl}}/api/cars?limit=10&offset=0&sortBy=timestamp&sortOrder=DESC",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"api",
						"cars"
					],
					"query": [
						{
							"key": "limit",
							"value": "10",
							"description": "Number of results to return (default: 50)"
						},
						{
							"key": "offset",
							"value": "0",
							"description": "Pagination offset (default: 0)"
						},
						{
							"key": "sortBy",
							"value": "timestamp",
							"description": "Field to sort by (default: timestamp)"
						},
						{
							"key": "sortOrder",
							"value": "DESC",
							"description": "Sort order: ASC or DESC (default: DESC)"
						},
						{
							"key": "plateNumber",
							"value": "",
							"description": "Filter by plate number (partial match)",
							"disabled": true
						},
						{
							"key": "color",
							"value": "",
							"description": "Filter by car color (partial match)",
							"disabled": true
						},
						{
							"key": "type",
							"value": "",
							"description": "Filter by car type (partial match)",
							"disabled": true
						}
					]
				},
				"description": "Retrieve all detected cars from the database with complete details.\n\n**Features:**\n- Pagination support (limit/offset)\n- Sorting by any field\n- Filtering by plate number, color, or type\n- Complete car details and statistics\n- Database statistics (total cars, last 24h)\n\n**Query Parameters:**\n- `limit`: Number of results (1-100, default: 50)\n- `offset`: Pagination offset (default: 0)\n- `sortBy`: Sort field (default: timestamp)\n- `sortOrder`: ASC or DESC (default: DESC)\n- `plateNumber`: Filter by plate (partial match)\n- `color`: Filter by color (partial match)\n- `type`: Filter by type (partial match)\n\n**Response includes:**\n- Array of cars with complete details\n- Pagination information\n- Database statistics\n- Applied filters"
			},
			"response": [
				{
					"name": "Successful Response",
					"originalRequest": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/api/cars?limit=2&sortBy=timestamp&sortOrder=DESC",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"cars"
							],
							"query": [
								{
									"key": "limit",
									"value": "2"
								},
								{
									"key": "sortBy",
									"value": "timestamp"
								},
								{
									"key": "sortOrder",
									"value": "DESC"
								}
							]
						}
					},
					"status": "OK",
					"code": 200,
					"_postman_previewlanguage": "json",
					"header": [
						{
							"key": "Content-Type",
							"value": "application/json"
						}
					],
					"cookie": [],
					"body": "{\n    \"success\": true,\n    \"message\": \"Retrieved 2 cars\",\n    \"totalCars\": 2,\n    \"totalInDatabase\": 15,\n    \"last24Hours\": 5,\n    \"pagination\": {\n        \"limit\": 2,\n        \"offset\": 0,\n        \"totalPages\": 1,\n        \"currentPage\": 1\n    },\n    \"filters\": {\n        \"plateNumber\": null,\n        \"color\": null,\n        \"type\": null,\n        \"sortBy\": \"timestamp\",\n        \"sortOrder\": \"DESC\"\n    },\n    \"cars\": [\n        {\n            \"id\": 123,\n            \"plateNumber\": \"22-24869\",\n            \"color\": \"White\",\n            \"type\": \"Sedan\",\n            \"imageUrl\": \"/uploads/car-image-123.jpg\",\n            \"imagePath\": \"/path/to/image.jpg\",\n            \"confidence\": 95,\n            \"cameraInfo\": \"Image: car-image.jpg\",\n            \"detectionId\": \"det-123-456\",\n            \"timestamp\": \"2025-09-25T10:59:00.000Z\",\n            \"createdAt\": \"2025-09-25T10:59:00.000Z\",\n            \"updatedAt\": \"2025-09-25T10:59:00.000Z\"\n        },\n        {\n            \"id\": 122,\n            \"plateNumber\": \"AB-1234\",\n            \"color\": \"Blue\",\n            \"type\": \"SUV\",\n            \"imageUrl\": \"/uploads/car-image-122.jpg\",\n            \"imagePath\": \"/path/to/image2.jpg\",\n            \"confidence\": 88,\n            \"cameraInfo\": \"Image: car-image2.jpg\",\n            \"detectionId\": \"det-122-789\",\n            \"timestamp\": \"2025-09-25T09:30:00.000Z\",\n            \"createdAt\": \"2025-09-25T09:30:00.000Z\",\n            \"updatedAt\": \"2025-09-25T09:30:00.000Z\"\n        }\n    ],\n    \"timestamp\": \"2025-09-25T11:00:00.123Z\"\n}"
				},
				{
					"name": "Filtered Results",
					"originalRequest": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/api/cars?plateNumber=22&color=white",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"cars"
							],
							"query": [
								{
									"key": "plateNumber",
									"value": "22"
								},
								{
									"key": "color",
									"value": "white"
								}
							]
						}
					},
					"status": "OK",
					"code": 200,
					"_postman_previewlanguage": "json",
					"header": [
						{
							"key": "Content-Type",
							"value": "application/json"
						}
					],
					"cookie": [],
					"body": "{\n    \"success\": true,\n    \"message\": \"Retrieved 1 cars\",\n    \"totalCars\": 1,\n    \"totalInDatabase\": 15,\n    \"last24Hours\": 5,\n    \"pagination\": {\n        \"limit\": 50,\n        \"offset\": 0,\n        \"totalPages\": 1,\n        \"currentPage\": 1\n    },\n    \"filters\": {\n        \"plateNumber\": \"22\",\n        \"color\": \"white\",\n        \"type\": null,\n        \"sortBy\": \"timestamp\",\n        \"sortOrder\": \"DESC\"\n    },\n    \"cars\": [\n        {\n            \"id\": 123,\n            \"plateNumber\": \"22-24869\",\n            \"color\": \"White\",\n            \"type\": \"Sedan\",\n            \"imageUrl\": \"/uploads/car-image-123.jpg\",\n            \"imagePath\": \"/path/to/image.jpg\",\n            \"confidence\": 95,\n            \"cameraInfo\": \"Image: car-image.jpg\",\n            \"detectionId\": \"det-123-456\",\n            \"timestamp\": \"2025-09-25T10:59:00.000Z\",\n            \"createdAt\": \"2025-09-25T10:59:00.000Z\",\n            \"updatedAt\": \"2025-09-25T10:59:00.000Z\"\n        }\n    ],\n    \"timestamp\": \"2025-09-25T11:00:00.123Z\"\n}"
				}
			]
		},
		{
			"name": "Health Check",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"pm.test(\"API is running\", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData.success).to.be.true;",
							"    pm.expect(jsonData.message).to.include('running');",
							"});",
							"",
							"pm.test(\"ChatGPT is configured\", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData.chatgpt).to.eql('configured');",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{baseUrl}}/api/health",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"api",
						"health"
					]
				},
				"description": "Check the health status of the Car Recognition API.\n\n**Returns:**\n- API status and version\n- Available endpoints\n- Feature list\n- AI model configuration\n- Database status\n- ChatGPT configuration status"
			},
			"response": [
				{
					"name": "Healthy Response",
					"originalRequest": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/api/health",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"health"
							]
						}
					},
					"status": "OK",
					"code": 200,
					"_postman_previewlanguage": "json",
					"header": [
						{
							"key": "Content-Type",
							"value": "application/json"
						}
					],
					"cookie": [],
					"body": "{\n    \"success\": true,\n    \"message\": \"Car Plate Recognition API is running\",\n    \"timestamp\": \"2025-09-25T11:00:00.000Z\",\n    \"version\": \"4.0.0 - Simplified\",\n    \"endpoints\": [\n        \"POST /api/cars - Upload images and get car recognition\",\n        \"GET /api/cars - Get all cars with details\",\n        \"GET /api/health - Health check\"\n    ],\n    \"features\": [\n        \"Single endpoint car recognition\",\n        \"Complete car details response\",\n        \"Enhanced AI accuracy\",\n        \"Pagination and filtering\",\n        \"Image upload and processing\"\n    ],\n    \"aiModel\": \"gpt-4o-mini\",\n    \"chatgpt\": \"configured\",\n    \"database\": \"MySQL Cars table\"\n}"
				}
			]
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "baseUrl",
			"value": "http://localhost:3002",
			"type": "string"
		}
	]
}
